/*!
 * gamepad.js v0.0.5-alpha
 * https://github.com/neogeek/gamepad.js
 *
 * Copyright (c) 2016 Scott Doxey
 * Released under the MIT license.
 */
(function(){"use strict";var e,t,n=window.navigator.getGamepads!==undefined;if(String(typeof window)!=="undefined"){["webkit","moz"].forEach(function(n){e=e||window.requestAnimationFrame||window[n+"RequestAnimationFrame"]||null;t=t||window.cancelAnimationFrame||window[n+"CancelAnimationFrame"]||null})}function a(e,t){var n=[];Object.keys(t).forEach(function(a){if(t[a]===e){n.push(a)}else if(Array.isArray(t[a])&&t[a].indexOf(e)!==-1){n.push(a)}});return n}function s(){this._events={gamepad:[],axes:[],keyboard:{}};this._handlers={gamepad:{connect:null,disconnect:null}};this._keyMapping={gamepad:{button_1:0,button_2:1,button_3:2,button_4:3,shoulder_top_left:4,shoulder_top_right:5,shoulder_bottom_left:6,shoulder_bottom_right:7,select:8,start:9,stick_button_left:10,stick_button_right:11,d_pad_up:12,d_pad_down:13,d_pad_left:14,d_pad_right:15,vendor:16},axes:{stick_axis_left:[0,2],stick_axis_right:[2,4]},keyboard:{button_1:32,start:27,d_pad_up:[38,87],d_pad_down:[40,83],d_pad_left:[37,65],d_pad_right:[39,68]}};this._threshold=.3;this._listeners=[];this._handleKeyboardEventListener=this._handleKeyboardEventListener.bind(this);this.resume()}s.prototype._handleGamepadConnected=function(e){if(this._handlers.gamepad.connect){this._handlers.gamepad.connect({index:e})}};s.prototype._handleGamepadDisconnected=function(e){if(this._handlers.gamepad.disconnect){this._handlers.gamepad.disconnect({index:e})}};s.prototype._handleGamepadEventListener=function(e){var t=this;if(e&&e.connected){e.buttons.forEach(function(n,s){var i=a(s,t._keyMapping.gamepad);if(i){i.forEach(function(a){if(n.pressed){if(!t._events.gamepad[e.index][a]){t._events.gamepad[e.index][a]={pressed:true,hold:false,released:false,player:e.index}}t._events.gamepad[e.index][a].value=n.value}else if(!n.pressed&&t._events.gamepad[e.index][a]){t._events.gamepad[e.index][a].released=true;t._events.gamepad[e.index][a].hold=false}})}})}};s.prototype._handleGamepadAxisEventListener=function(e){var t=this;if(e&&e.connected){Object.keys(t._keyMapping.axes).forEach(function(n){var a=Array.prototype.slice.apply(e.axes,t._keyMapping.axes[n]);if(Math.abs(a[0])>t._threshold||Math.abs(a[1])>t._threshold){t._events.axes[e.index][n]={pressed:t._events.axes[e.index][n]?false:true,hold:t._events.axes[e.index][n]?true:false,released:false,value:a}}else if(t._events.axes[e.index][n]){t._events.axes[e.index][n]={pressed:false,hold:false,released:true,value:a}}})}};s.prototype._handleKeyboardEventListener=function(e){var t=this,n=a(e.keyCode,t._keyMapping.keyboard);if(n){n.forEach(function(n){if(e.type==="keydown"&&!t._events.keyboard[n]){t._events.keyboard[n]={pressed:true,hold:false,released:false}}else if(e.type==="keyup"&&t._events.keyboard[n]){t._events.keyboard[n].released=true;t._events.keyboard[n].hold=false}})}};s.prototype._handleEvent=function(e,t,n){if(t[e].pressed){this.trigger("press",e,t[e].value,n);t[e].pressed=false;t[e].hold=true}else if(t[e].hold){this.trigger("hold",e,t[e].value,n)}else if(t[e].released){this.trigger("release",e,t[e].value,n);delete t[e]}};s.prototype._loop=function(){var t=this,a=n?window.navigator.getGamepads():false,s=4,// length = gamepads.length;
i;if(a){for(i=0;i<s;i=i+1){if(a[i]){if(!t._events.gamepad[i]){t._handleGamepadConnected(i);t._events.gamepad[i]={};t._events.axes[i]={}}t._handleGamepadEventListener(a[i]);t._handleGamepadAxisEventListener(a[i])}else if(t._events.gamepad[i]){t._handleGamepadDisconnected(i);t._events.gamepad[i]=null;t._events.axes[i]=null}}t._events.gamepad.forEach(function(e,n){if(e){Object.keys(e).forEach(function(a){t._handleEvent(a,e,n)})}});t._events.axes.forEach(function(e,n){if(e){Object.keys(e).forEach(function(a){t._handleEvent(a,e,n)})}})}Object.keys(t._events.keyboard).forEach(function(e){t._handleEvent(e,t._events.keyboard,"keyboard")});if(t._requestAnimation){t._requestAnimation=e(t._loop.bind(t))}};s.prototype.on=function(e,t,n,a){var s=this;if(Object.keys(this._handlers.gamepad).indexOf(e)!==-1&&typeof t==="function"){this._handlers.gamepad[e]=t;this._events.gamepad=[]}else{if(typeof e==="string"&&e.match(/\s+/)){e=e.split(/\s+/g)}if(typeof t==="string"&&t.match(/\s+/)){t=t.split(/\s+/g)}if(Array.isArray(e)){e.forEach(function(e){s.on(e,t,n,a)})}else if(Array.isArray(t)){t.forEach(function(t){s.on(e,t,n,a)})}else{this._listeners.push({type:e,button:t,callback:n,options:a})}}};s.prototype.setCustomMapping=function(e,t){if(this._keyMapping[e]!==undefined){this._keyMapping[e]=t}else{throw new Error('The device "'+e+'" is not supported through gamepad.js')}};s.prototype.setGlobalThreshold=function(e){this._threshold=parseFloat(e)};s.prototype.trigger=function(e,t,n,a){if(this._listeners){this._listeners.forEach(function(s){if(s.type===e&&s.button===t){s.callback({type:s.type,button:s.button,value:n,player:a,event:s,timestamp:Date.now()})}})}};s.prototype.pause=function(){t(this._requestAnimation);this._requestAnimation=null;document.removeEventListener("keydown",this._handleKeyboardEventListener);document.removeEventListener("keyup",this._handleKeyboardEventListener)};s.prototype.resume=function(){this._requestAnimation=e(this._loop.bind(this));document.addEventListener("keydown",this._handleKeyboardEventListener);document.addEventListener("keyup",this._handleKeyboardEventListener)};s.prototype.destroy=function(){this.pause();delete this._listeners};if(typeof define==="function"&&define.amd!==undefined){define([],function(){return s})}else if(typeof module==="object"&&module.exports!==undefined){module.exports=s}else{window.Gamepad=s}})();