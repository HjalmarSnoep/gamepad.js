/*!
 * gamepad.js v0.0.3-alpha 2014-05-31T19:09:26
 * https://github.com/neogeek/gamepad.js
 * 
 * Copyright (c) 2014 Scott Doxey
 * Released under the MIT license.
 */
!function(){"use strict";function a(a){return"[object Array]"===Object.prototype.toString.call(a)?!0:!1}function b(a,b){var c=!1;return"object"==typeof a?a.pressed&&(c=!0):"number"==typeof a&&a>b&&(c=!0),c}function c(){this._threshold=1,this._listeners=[],this._activeKeys=[],this._activeInputs={gamepad:[],keyboard:[]},this._keyMapping={gamepad:{button_1:0,button_2:1,button_3:2,button_4:3,shoulder_top_left:4,shoulder_top_right:5,shoulder_bottom_left:6,shoulder_bottom_right:7,select:8,start:9,stick_button_left:10,stick_button_right:11,d_pad_up:12,d_pad_down:13,d_pad_left:14,d_pad_right:15,vendor:16},keyboard:{button_1:32,start:27,d_pad_up:[38,87],d_pad_down:[40,83],d_pad_left:[37,65],d_pad_right:[39,68]}},document.addEventListener("keydown",this._handleEventListener.bind(this)),document.addEventListener("keyup",this._handleEventListener.bind(this)),window.requestAnimationFrame(this._loop.bind(this))}c.prototype._handleGamepad=function(c,d){var e=this,f=e._keyMapping.gamepad;void 0===e._activeInputs.gamepad[d]&&(e._activeInputs.gamepad[d]={}),e._listeners.forEach(function(g){var h=f[g.button],i=!1;a(h)?h.forEach(function(a){i=b(c.buttons[a],e._threshold)||i}):i=b(c.buttons[h],e._threshold)||i,i&&void 0!==e._activeInputs.gamepad[d][g.button]?e._handleListener(g,e._activeInputs.gamepad[d][g.button],{button:g.button,player:d,event:{buttonKey:h}}):e._activeInputs.gamepad[d][g.button]={}})},c.prototype._handleKeyboard=function(){var b=this,c=b._keyMapping.keyboard;this._listeners.forEach(function(d){var e=c[d.button],f=!1;a(e)?c[d.button].forEach(function(a){-1!==b._activeKeys.indexOf(a)&&(f=!0,e=a)}):f=-1!==b._activeKeys.indexOf(e),f&&void 0!==b._activeInputs.keyboard[d.button]?b._handleListener(d,b._activeInputs.keyboard[d.button],{button:d.button,player:"keyboard",event:{keyCode:e}}):b._activeInputs.keyboard[d.button]={}})},c.prototype._handleEventListener=function(a){"keydown"===a.type&&-1===this._activeKeys.indexOf(a.keyCode)?this._activeKeys.push(a.keyCode):"keyup"===a.type&&-1!==this._activeKeys.indexOf(a.keyCode)&&this._activeKeys.splice(this._activeKeys.indexOf(a.keyCode),1)},c.prototype._handleListener=function(a,b,c){b.delay?b.delay=b.delay-1:a.options.delay&&(b.delay=a.options.delay),a.options.once||(b.triggered=!1),b.delay||b.triggered||(b.triggered=!0,a.callback.call(this,c))},c.prototype._loop=function(){Array.prototype.slice.call(window.navigator.getGamepads()).forEach(this._handleGamepad.bind(this)),this._handleKeyboard(),window.requestAnimationFrame(this._loop.bind(this))},c.prototype.on=function(a,b,c){"function"==typeof b&&void 0===c&&(c=b,b={}),this._listeners.push({button:a,options:b,callback:c})},c.prototype.off=function(a){var b=this;b._listeners.forEach(function(c){c.button===a&&b._listeners.splice(b._listeners.indexOf(c),1)})},c.prototype.trigger=function(a){var b=this;b._listeners.forEach(function(b){b.button===a&&b.callback({button:b.button,player:null,event:{}})})},c.prototype.setCustomMapping=function(a,b){if(void 0===this._keyMapping[a])throw new Error('The device "'+a+'" is not supported through gamepad.js');this._keyMapping[a]=b},"function"==typeof define&&void 0!==define.amd?define([],c):"object"==typeof module&&void 0!==module.exports?module.exports=c:window.Gamepad=c}();